# This a template for Prismatik plugin configuration
# How to make a plugin:
#	- create a folder in Prismatik/Plugins (in your user's home dir), for ex "myplugin"
#	- copy this INI file into that folder with the same name as the folder, for ex "myplugin.ini"
#		Prismatik will do this automatically on launch (or when you reload the plugin list from the UI)
#	- edit the INI file to suit your needs
#	- to make your code interact with Prismatik enable the web server and checkout Software/apiexamples
#	- plugin output will be merged with Prismatik logs, make sure to enable those if needed

# [Main] is a required section
[Main]

# this will be displayed in the Plugins tab, defaults to plugin folder name
;Name=My custom plugin
Name=

# command to make your plugin run, REQUIRED
#	- the process will start in plugin's folder so your scripts will be local
#	- system env vars are passed to the process
#	- if you need external/system commands (interpreters / shell...)
#		either use full path
#			Execute=/bin/sh myplugin.sh
#		or make sure it's in the PATH env var
#			Execute=node myplugin.js
#		shebangs should work too
#	- this can be pretty much any executable and not related to Prismatik
#		it could trigger something on the system when Prismatik launches
#	- AVOID SPACES IN PATHS AND NAMES
#		this won't work
#			Execute=C:/Program Files/python.exe "my custom plugin.py"
#		if spaces in file names are required, wrap the command in a script
#	- on WINDOWS use forward slash "/" as file separator
#			Execute=D:/Some/Path/curl.exe -s http://example.com/api/foo
Execute=

# platform specific command if needed, overrides Execute= on a given platform
# REQUIRED if Execute= is not used
# use forward slash "/" as file separator on WINDOWS
;ExecuteOnWindows=python.exe myscript.py
;ExecuteOnOSX=/some/path/sh myscript.sh
;ExecuteOnNix=myscript.sh


# these will be displayed in Plugins tab

# icon file (bmp, gif, jpg, png) within your plugin folder, defaults to a built-in icon
;Icon=myicon.png
Icon=
Author=
# version can be a number/string/hash/date...
Version=0.1

# description can be plain text
;Description=My plugin that does this and that
# or basic HTML, see https://doc.qt.io/qt-5/richtext-html-subset.html
Description="
<html>
	<head>
		<style>
			p {
				font-weight:bold;
				color:red;
			}
		</style>
	</head>
	<body>
		<p>Make sure to update the INI file in the plugin folder</p>
	</body>
</html>
"




# here you can define any custom sections and settings to use in your plugin
;[MyCustomSettings]
;foo=bar

;[SomeOtherSection]
;port=6969
